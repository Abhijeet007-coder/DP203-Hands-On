-- CREATE A DATABASE WITH A FILEGROUP FOR EACH YEAR OF DATA (2008 to 2011)
USE master
GO

IF EXISTS (SELECT * FROM sys.sysdatabases WHERE name = 'PartitioningDemo')
BEGIN
DROP DATABASE PartitioningDemo
END
GO

CREATE DATABASE PartitioningDemo
GO

ALTER DATABASE PartitioningDemo ADD FILEGROUP fg2008
GO

ALTER DATABASE PartitioningDemo ADD FILEGROUP fg2009
GO

ALTER DATABASE PartitioningDemo ADD FILEGROUP fg2010
GO


ALTER DATABASE PartitioningDemo ADD FILE
(NAME = N'F2008',
FILENAME = N'c:\sqldata\F2008.ndf', SIZE = 2048KB) TO FILEGROUP fg2008
GO

ALTER DATABASE PartitioningDemo ADD FILE
(NAME = N'F2009',
FILENAME = N'c:\sqldata\F2009.ndf', SIZE = 2048KB) TO FILEGROUP fg2009
GO

ALTER DATABASE PartitioningDemo ADD FILE
(NAME = N'F2010',
FILENAME = N'c:\sqldata\F2010.ndf', SIZE = 2048KB) TO FILEGROUP fg2010
GO


-- CREATE A PARTITIONING FUNCTION AND SCHEME
USE PartitioningDemo
GO

CREATE PARTITION FUNCTION pf_OrderDateKey(int)
AS RANGE LEFT
FOR VALUES(20081231,20091231)
GO

CREATE PARTITION SCHEME ps_OrderDateKey
AS PARTITION pf_OrderDateKey
TO (fg2008,fg2009,fg2010)
GO

-- CREATE A PARTITIONED TABLE AND POPULATE IT
CREATE TABLE [dbo].[FactSalesOrder]
(
	[CustomerKey] [int] NOT NULL,
	[ProductKey] [int] NOT NULL,
	[OrderDateKey] [int] NOT NULL,
	[OrderNo] [int] NOT NULL,
	[LineNo] [int] NOT NULL,
	[Quantity] [smallint] NULL,
	[SalesAmount] [money] NULL
 CONSTRAINT [PK_ FactSalesOrder] PRIMARY KEY NONCLUSTERED
 (
	[CustomerKey],[ProductKey],[OrderDateKey],[OrderNo],[LineNo]
 )
)
ON ps_OrderDateKey(OrderDateKey)
GO

DECLARE @StartDate datetime
DECLARE @EndDate datetime
DECLARE @Counter int
SET @StartDate = '01/01/2008'
SET @EndDate = '01/01/2011' 
SET @Counter = 1
DECLARE @LoopDate datetime
SET @LoopDate = @StartDate

WHILE @LoopDate < @EndDate
BEGIN
  INSERT INTO [dbo].[FactSalesOrder] VALUES
	(
		@Counter % 10,
		@Counter % 8,
		CAST(CONVERT(VARCHAR(8), @LoopDate, 112) AS int) , -- date key
		@Counter + 1000,
		1,
		@Counter % 5,
		@Counter % 10
	)  		  
	 -- increment the date by 1 day and do next loop
	SET @LoopDate = DateAdd(dd, 1, @LoopDate)
	SET @counter = @counter + 1
END

-- VIEW THE PARTITIONED DATA ALLOCATIONS
SELECT $PARTITION.pf_OrderDateKey (OrderDateKey) AS
PartitionNo,COUNT(*) AS Rows,
MIN(OrderDateKey) As MinValue FROM [FactSalesOrder]
GROUP BY $PARTITION.pf_OrderDateKey (OrderDateKey)
ORDER BY PartitionNo
GO

-- ADD A NEW PARTITION FOR 2011
ALTER DATABASE PartitioningDemo ADD FILEGROUP fg2011
GO

ALTER DATABASE PartitioningDemo ADD FILE
(NAME = N'F2011',
FILENAME = N'c:\sqldata\F2011.ndf', SIZE = 2048KB) TO FILEGROUP fg2011
GO

ALTER PARTITION SCHEME ps_OrderDateKey
NEXT USED fg2011
GO

ALTER PARTITION FUNCTION pf_OrderDateKey ()
SPLIT RANGE(20101231)
GO

-- ADD NEW DATA
DECLARE @StartDate datetime
DECLARE @EndDate datetime
DECLARE @Counter int
SET @StartDate = '01/01/2011'
SET @EndDate = '01/01/2012' 
SET @Counter = 1
DECLARE @LoopDate datetime
SET @LoopDate = @StartDate

WHILE @LoopDate < @EndDate
BEGIN
  INSERT INTO [dbo].[FactSalesOrder] VALUES
	(
		@Counter % 10,
		@Counter % 8,
		CAST(CONVERT(VARCHAR(8), @LoopDate, 112) AS int) , -- date key
		@Counter + 1000,
		1,
		@Counter % 5,
		@Counter % 10
	)  		  
	 -- increment the date by 1 day and do next loop
	SET @LoopDate = DateAdd(dd, 1, @LoopDate)
	SET @counter = @counter + 1
END

-- VIEW THE NEW PARTITION DATA ALLOCATIONS
SELECT $PARTITION.pf_OrderDateKey (OrderDateKey) AS
PartitionNo,COUNT(*) AS Rows,
MIN(OrderDateKey) As MinValue FROM [FactSalesOrder]
GROUP BY $PARTITION.pf_OrderDateKey (OrderDateKey)
ORDER BY PartitionNo
GO

-- CREATE AN ARCHIVE TABLE AND A TEMP TABLE ON THE FG2008 FILEGROUP
CREATE TABLE [dbo].[FactSalesOrderArchive]
(
	[CustomerKey] [int] NOT NULL,
	[ProductKey] [int] NOT NULL,
	[OrderDateKey] [int] NOT NULL,
	[OrderNo] [int] NOT NULL,
	[LineNo] [int] NOT NULL,
	[Quantity] [smallint] NULL,
	[SalesAmount] [money] NULL
)
GO

CREATE TABLE [dbo].[FactSalesOrderTemp]
(
	[CustomerKey] [int] NOT NULL,
	[ProductKey] [int] NOT NULL,
	[OrderDateKey] [int] NOT NULL,
	[OrderNo] [int] NOT NULL,
	[LineNo] [int] NOT NULL,
	[Quantity] [smallint] NULL,
	[SalesAmount] [money] NULL
)
ON FG2008
GO

-- SWITCH OUT THE OLD DATA AND ARCHIVE IT
ALTER TABLE dbo.FactSalesOrder
SWITCH PARTITION 1 TO dbo.FactSalesOrderTemp
GO

INSERT INTO FactSalesOrderArchive
SELECT * FROM FactSalesOrderTemp
GO

-- VIEW THE PARTITION DATA ALLOCATION AFTER THE SWITCH
SELECT $PARTITION.pf_OrderDateKey (OrderDateKey) AS
PartitionNo,COUNT(*) AS Rows,
MIN(OrderDateKey) As MinValue FROM [FactSalesOrder]
GROUP BY $PARTITION.pf_OrderDateKey (OrderDateKey)
ORDER BY PartitionNo
GO

-- CLEAN UP
ALTER PARTITION FUNCTION pf_OrderDateKey ()
MERGE RANGE(20081231)
GO

DROP TABLE dbo.FactSalesOrderTemp
GO

ALTER DATABASE PartitioningDemo
REMOVE FILE F2008

ALTER DATABASE PartitioningDemo
REMOVE FILEGROUP FG2008



